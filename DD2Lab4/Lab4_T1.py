class human:

    name = None     # Имя (str)
    surname = None      # Фамилия (str)
    age = None      # Возраст (int)

    # Конструктор
    def __init__(self, surname, name, age = None):
        """
        Создание объекта класса "human":
        :param name: Имя человека (str)
        :param surname: Фамилия человека (str)
        :param age: Возраст человека (int)
        Пример:
        >>> human1 = human("Nikita", "Titaev", 26)      # Инициализация объекта класса
        """

        # Если значение имени не является строкой, то выдается ошибка:
        if not (isinstance(name, str)):
            raise TypeError("Некорректное имя")

        # Если строка имеет символы, не являющиеся буквами, выдается ошибка:
        if not (name.isalpha()):
            raise ValueError("Имя может содержать только буквы")

        # Если имя начинается не с заглавной буквы, то выдается ошибка:
        if name[0].islower():
            raise ValueError("Имя должно начинаться с большой буквы")

        # Введенное имя записывается в поле класса, если ни одно условие не нарушено
        self.name = name


        # Если значение фамилии не является строкой, то выдается ошибка:
        if not (isinstance(surname, str)):
            raise TypeError("Фамилия введена не корректно")

        # Если строка имеет символы, не являющиеся буквами, выдается ошибка:
        if not (surname.isalpha()):
            raise ValueError("Фамилия может содержать только буквы")

        # Если фамилия начинается не с заглавной буквы, то выдается ошибка:
        if surname[0].islower():
            raise ValueError("Фамилия должна начинаться с большой буквы")

        # Введенное значение строки записывается в поле класса, если ни одно условие не нарушено
        self.surname = surname


        # Если введенный возраст не является целым числом, выдается ошибка:
        if not (isinstance(age, int)):
            raise TypeError("Возраст может быть написан только целым числом")

        # Если введенное число отрицательно, выдется ошибка:
        if age < 0:
            raise ValueError("Возраст не может быть отрицательным")

        # Если введенное значение больше 150, выдается ошибка значения
        if age > 150:
            raise ValueError("Некорректно большое значение возраста")

        # Введенный возраст записывается в поле класса, если не нарушено ни одно условие
        self.age = age

    # Магический метод __str__
    def __str__(self):
        """
        Выводит в консоль полную информацию об объекте
        Пример:
        >>> human1.__str__()
        """

        print(f"Имя: {self.name}, Фамилия: {self.surname}, Возраст: {self.age} лет")

    # Магический метод __repr__
    def __repr__(self):
        """
        Метод возвращает строку валидного кода создания данного объекта класса
        Пример:
        >>> a = human1.__repr__()
        """

        return f"human({self.surname!r}, {self.name!r}, {self.age!r})"



class student(human):

    numofdebts = 0

    def __init__(self, surname, name = None, age = None, numofdebts = 0):
        """
        Создание объекта класса "student":
        :param numofdebts: Количество долгов у студента (int)
        Пример:
        >>> student1 = student("Pavel", "Zaharov", 19, 5)       # Инициализация объекта класса
        """

        # Вызов конструктора родтельского класса
        super().__init__(surname, name, age)

        # Если введенное значение не является целым числом, выдается ошибка:
        if not (isinstance(numofdebts, int)):
            raise TypeError("Количество долгов может быть только целочисленным")

        # Если введенное значение отрицательно, выдется ошибка:
        if numofdebts < 0:
            raise ValueError("Количество долгов не может быть отрицательным")

        # Если введенное значение больше 5, выдается ошибка:
        if numofdebts > 5:
            raise ValueError("Студентов с 5+ долгами представляют к отчислению")

        # Если ни одно условие не выполнено, введенное значение записывается в поле класса
        self.numofdebts = numofdebts


    # Магический метод __str__
    def __str__(self):
        """
        Метод выводит в консоль полную информацию об объекте
        Выходная строка создается путем объединения строки,
        полученной в результате выполнения одноименного метода родительского класса,
        и дополнительной строки, в которой представлена информация о количестве долгов студента.
        Пример:
        >>> student1.__str__()
        """

        print(super.__str__() + f", Количество долгов: {self.numofdebts}")


    # Магический метод __repr__
    def __repr__(self):
        """
        Метод возвращает строку валидного кода создания данного объекта класса
        Возвращаемая строка создается путем объединения строки,полученной
        в результате выполнения одноименного метода родительского класса,
        и дополнительной строки, в которой представлена информация о количестве долгов студента.
        Пример:
        >>> a = student1.__repr__()
        """

        return super.__repr__() + f", {self.numofdebts!r}"



class teacher(human):

    numofstudexpelled = 0

    def __init__(self, surname, name=None, age=None, numofstudexpelled = 0):
        """
        Создание объекта класса "teacher":
        :param numofstudexpelled: Количество отчисленных студентов (int)
        Пример:
        >>> teacher1 = teacher("Vagyrina", "Irina", 56, 2)      # Инициализация объекта класса
        """

        # Вызов конструктора родтельского класса
        super().__init__(surname, name, age)

        # Если введенное значение отчисленных преподавателем не является целым числом, то выдается ошибка:
        if not (isinstance(numofstudexpelled, int)):
            raise TypeError("Количество отчисленных студентов может быть только целочисленным")

        # Если введенное значение отрицательно, выдется ошибка:
        if numofstudexpelled < 0:
            raise ValueError("Количество отчисленных студентов не может быть отрицательным")

        # Если ни одно условие не выполнено, введенное значение записывается в поле класса
        self.numofstudexpelled = numofstudexpelled

        # Магический метод __str__
        def __str__(self):
            """
            Метод выводит в консоль полную информацию об объекте. Выходная строка создается путем
            конкатенации строки, полученной в результате выполнения одноименного метода родительского класса,
            и дополнительной строки, в которой содержится информация о числе студентов, отчисленных преподавателем.
            Пример:
            >>> teacher1.__str__()
            """

            print(super.__str__() + f", Количество отчисленных студентов: {numofstudexpelled}")


        # Магический метод __repr__
        def __repr__(self):
            """
            Метод возвращает строку, представляющую валидный код создания данного объекта класса.
            Возвращаемая строка формируется путем конкатенации результата выполнения одноименного
            метода родительского класса и дополнительной строки, включающей информацию о количестве
            студентов, отчисленных преподавателем.
            Пример:
            >>> a = teacher1.__repr__()
            """

            return super.__repr__() + f", {numofstudexpelled!r}"